import tensorflow as tf // TensorFlow 를 사용하려면 먼저 import 를 해야 합니다.
from tensorflow.examples.tutorials.mnist import input_data // MNIST 데이터

# Dataset loading
mnist = input_data.read_data_sets("./samples/MNIST_data/", one_hot=True)

# Set up model
x = tf.placeholder(tf.float32, [None, 784]) // 심볼릭 변수들을 사용하여 상호작용하는 작업들을 기술합니다
W = tf.Variable(tf.zeros([784, 10]))
b = tf.Variable(tf.zeros([10]))
y = tf.nn.softmax(tf.matmul(x, W) + b)
#첫번째로, 우리는  tf.matmul(x, W)  표현식으로 x 
#x 와 W를 곱합니다. 이 값은 W x가 있던 우리 식에서 곱한 결과에서 뒤집혀 있는데, 이것은 x가 여러 입력으로 구성된 2D 텐서일 경우를 다룰 수 있게 하기 위한 잔재주입니다. 그 다음 b를 더하고, 마지막으로  tf.nn.softmax  를 적용합니다.
#xWb는 특별한 값이 아닙니다. 수식기호인데, 우리가 TensorFlow에게 계산을 하도록 명령할 때 입력할 값입니다. 우리는 MNIST 이미지들의 어떤 숫자들이든 입력할 수 있기를 원하는데, 각 이미지들은 784차원의 벡터로 단조화되어 있습니다. 우리는 이걸  [None, 784]  형태의 부정소숫점으로 이루어진 2차원 텐서로 표현합니다. (None 은 해당 값이 어떤 길이도 될 수 있음을 의미합니다.)

#우리는 또한 가중치와 편향값이 필요합니다. 이런 것들을 추가적인 입력으로 다루는 것을 생각해 볼 수 있습니다. 그러나 TensorFlow는 더 나은 방법을 갖고 있습니다:  Variable 이죠.  Variable 은 TensorFlow의 상호작용하는 작업 그래프들간에 유지되는 변경 가능한 텐서입니다. 계산 과정에서 사용되거나 심지어 변경될 수도 있습니다. 기계학습 응용 사례들을 위해 일반적으로 모델 파라미터  Variables  를 사용합니다.
#우리는  tf.Variable  을 주어서  Variable 의 초기값을 만듭니다: 이 경우, 우리는  W  와  b  를 0으로 채워진 텐서들로 초기화함 우리가  W 와  b  를 학습할 것이기 때문에, 그것들이 무엇으로 초기화되었는지는 크게 중요하지 않습니다.

# 우리는 784차원의 이미지 벡터를 곱하여 10차원 벡터의 증거를 만들것임.
#b는  [10] 의 형태이므로 출력에 더하기가능

y_ = tf.placeholder(tf.float32, [None, 10])
#교차 엔트로피를 구현
cross_entropy = -tf.reduce_sum(y_*tf.log(y))
#이 경우 TensorFlow에게 학습도를 0.01로 준 경사 하강법(gradient descent) 알고리즘을 이용하여 교차 엔트로피를 최소화하도록 명령
train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)

# Session
init = tf.initialize_all_variables()

sess = tf.Session()
sess.run(init)
#이제 세션에서 모델을 시작하고 변수들을 초기화하는 작업을 실행할 수 있다
# Learning
for i in range(1000):
  batch_xs, batch_ys = mnist.train.next_batch(100)
  sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
# 각 반복 단계마다, 학습 세트로부터 100개의 무작위 데이터들의 일괄 처리(batch)들을 가져옵니다.  placeholders 를 대체하기 위한 일괄 처리 데이터에  train_step  피딩을 실행합니다.

# Validation
correct_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
# 음, 우선 맞는 라벨을 예측했는지를 확인합시다.  tf.argmax 는 특정한 축을 따라 가장 큰 원소의 색인을 알려주는 엄청나게 유용한 함수입니다. 예를 들어  tf.argmax(y,1)  는 진짜 라벨이  tf.argmax(y_,1)  일때 우리 모델이 각 입력에 대하여 가장 정확하다고 생각하는 라벨입니다. 우리는  tf.equal  을 이용해 예측이 실제와 맞았는지 확인할 수 있습니다.

# Result should be approximately 91%.
# 테스트 데이터를 대상으로 정확도를 확인해 봅시다.
print(sess.run(accuracy, feed_dict={x: mnist.test.images, y_: mnist.test.labels}))